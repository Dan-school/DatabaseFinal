
--THIS IS CREATING ALL THE TABLES FOR THE DATABASE THIS WILL INCLUDE CREATION OF THE TABLES, ALONG WITH PRIVATE KEYS, UNIQUES AND CHECKS


CREATE TABLE cos_457_final.authors (
    authorid    NUMBER(*, 0) NOT NULL,
    name        VARCHAR2(50 BYTE) NOT NULL,
    family_name VARCHAR2(50 BYTE) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.authors_pk ON
    cos_457_final.authors (
        authorid
    ASC );

ALTER TABLE cos_457_final.authors ADD CONSTRAINT authors_pk PRIMARY KEY ( authorid );

CREATE TABLE cos_457_final.book_author (
    bookid   NUMBER(*, 0) NOT NULL,
    authorid NUMBER(*, 0) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.book_author_pk ON
    cos_457_final.book_author (
        bookid
    ASC,
        authorid
    ASC );

ALTER TABLE cos_457_final.book_author ADD CONSTRAINT book_author_pk PRIMARY KEY ( bookid,
                                                                                  authorid );

CREATE TABLE cos_457_final.book_genre (
    bookid  NUMBER(*, 0) NOT NULL,
    genreid NUMBER NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.book_genre_pk ON
    cos_457_final.book_genre (
        genreid
    ASC,
        bookid
    ASC );

ALTER TABLE cos_457_final.book_genre ADD CONSTRAINT book_genre_pk PRIMARY KEY ( genreid,
                                                                                bookid );

CREATE TABLE cos_457_final.books (
    bookid           NUMBER(*, 0) NOT NULL,
    title            VARCHAR2(100 BYTE) NOT NULL,
    pagecount        NUMBER(*, 0) NOT NULL,
    copies           NUMBER(*, 0) DEFAULT 1,
    copies_available NUMBER(*, 0) DEFAULT 1,
    isbn             VARCHAR2(20 BYTE) NOT NULL,
    year_of_pup      NUMBER
);

ALTER TABLE cos_457_final.books ADD CONSTRAINT books_chk2 CHECK ( copies_available >= 0 );

CREATE UNIQUE INDEX cos_457_final.books_pk ON
    cos_457_final.books (
        bookid
    ASC );

ALTER TABLE cos_457_final.books ADD CONSTRAINT books_chk1 CHECK ( copies >= copies_available );

ALTER TABLE cos_457_final.books ADD CONSTRAINT books_pk PRIMARY KEY ( bookid );

CREATE TABLE cos_457_final.borrowed_books (
    borrowid    NUMBER(*, 0) NOT NULL,
    userid      NUMBER(*, 0) NOT NULL,
    bookid      NUMBER(*, 0) NOT NULL,
    takendate   DATE DEFAULT sysdate NOT NULL,
    returndate  DATE,
    librarianid NUMBER(*, 0) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.borrowed_books_pk ON
    cos_457_final.borrowed_books (
        borrowid
    ASC );

ALTER TABLE cos_457_final.borrowed_books ADD CONSTRAINT borrowed_books_chk1 CHECK ( returndate > takendate );

ALTER TABLE cos_457_final.borrowed_books ADD CONSTRAINT borrowed_books_pk PRIMARY KEY ( borrowid );

CREATE TABLE cos_457_final.contact (
    contactid NUMBER NOT NULL,
    address   VARCHAR2(20 BYTE) NOT NULL,
    city      VARCHAR2(20 BYTE) NOT NULL,
    stateid   NUMBER NOT NULL,
    zip       NUMBER NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.contact_pk ON
    cos_457_final.contact (
        contactid
    ASC );

ALTER TABLE cos_457_final.contact ADD CONSTRAINT contact_pk PRIMARY KEY ( contactid );

CREATE TABLE cos_457_final.contact_email (
    contactid NUMBER NOT NULL,
    emailid   NUMBER NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.contact_email_pk ON
    cos_457_final.contact_email (
        contactid
    ASC,
        emailid
    ASC );

ALTER TABLE cos_457_final.contact_email ADD CONSTRAINT contact_email_pk PRIMARY KEY ( contactid,
                                                                                      emailid );

CREATE TABLE cos_457_final.contact_phone (
    contactid NUMBER NOT NULL,
    phoneid   NUMBER NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.contact_phone_pk ON
    cos_457_final.contact_phone (
        contactid
    ASC,
        phoneid
    ASC );

ALTER TABLE cos_457_final.contact_phone ADD CONSTRAINT contact_phone_pk PRIMARY KEY ( contactid,
                                                                                      phoneid );

CREATE TABLE cos_457_final.email (
    emailid NUMBER NOT NULL,
    email   VARCHAR2(20 BYTE) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.email_pk ON
    cos_457_final.email (
        emailid
    ASC );

ALTER TABLE cos_457_final.email ADD CONSTRAINT email_pk PRIMARY KEY ( emailid );

CREATE TABLE cos_457_final.genre (
    genreid NUMBER NOT NULL,
    genre   VARCHAR2(40 BYTE) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.genre_pk ON
    cos_457_final.genre (
        genreid
    ASC );

ALTER TABLE cos_457_final.genre ADD CONSTRAINT genre_pk PRIMARY KEY ( genreid );

CREATE TABLE cos_457_final.jobs (
    jobid NUMBER NOT NULL,
    job   VARCHAR2(20 BYTE) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.jobs_pk ON
    cos_457_final.jobs (
        jobid
    ASC );

ALTER TABLE cos_457_final.jobs ADD CONSTRAINT jobs_pk PRIMARY KEY ( jobid );

CREATE TABLE cos_457_final.librarians (
    librarianid NUMBER(*, 0) NOT NULL,
    name        VARCHAR2(20 BYTE) NOT NULL,
    family_name VARCHAR2(20 BYTE) NOT NULL,
    email       VARCHAR2(45 BYTE) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.librarians_pk ON
    cos_457_final.librarians (
        librarianid
    ASC );

ALTER TABLE cos_457_final.librarians ADD CONSTRAINT librarians_pk PRIMARY KEY ( librarianid );

CREATE TABLE cos_457_final.librarians_jobs (
    librarianid NUMBER(*, 0) NOT NULL,
    jobid       NUMBER NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.librarians_jobs_pk ON
    cos_457_final.librarians_jobs (
        librarianid
    ASC,
        jobid
    ASC );

ALTER TABLE cos_457_final.librarians_jobs ADD CONSTRAINT librarians_jobs_pk PRIMARY KEY ( librarianid,
                                                                                          jobid );

CREATE TABLE cos_457_final.libuser (
    userid      NUMBER(*, 0) NOT NULL,
    name        VARCHAR2(20 BYTE) NOT NULL,
    family_name VARCHAR2(20 BYTE) NOT NULL,
    birthdate   DATE NOT NULL,
    contactid   NUMBER NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.libuser_uk1 ON
    cos_457_final.libuser (
        contactid
    ASC );

CREATE UNIQUE INDEX cos_457_final.students_pk ON
    cos_457_final.libuser (
        userid
    ASC );

ALTER TABLE cos_457_final.libuser ADD CONSTRAINT libuser_pk PRIMARY KEY ( userid );

ALTER TABLE cos_457_final.libuser ADD CONSTRAINT libuser_uk1 UNIQUE ( contactid );

CREATE TABLE cos_457_final.phone (
    phoneid  NUMBER NOT NULL,
    phonenum VARCHAR2(20 BYTE) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.phone_pk ON
    cos_457_final.phone (
        phoneid
    ASC );

ALTER TABLE cos_457_final.phone ADD CONSTRAINT phone_pk PRIMARY KEY ( phoneid );

CREATE TABLE cos_457_final.returned_books (
    returnid          NUMBER(*, 0) NOT NULL,
    librarianid       NUMBER(*, 0) NOT NULL,
    bookid            NUMBER(*, 0) NOT NULL,
    returned_to_shelf NUMBER DEFAULT 0 NOT NULL
);

ALTER TABLE cos_457_final.returned_books
    ADD CONSTRAINT returned_books_chk1 CHECK ( returned_to_shelf = 0
                                               OR returned_to_shelf = 1 );

CREATE UNIQUE INDEX cos_457_final.returned_books_pk ON
    cos_457_final.returned_books (
        returnid
    ASC );

ALTER TABLE cos_457_final.returned_books ADD CONSTRAINT returned_books_pk PRIMARY KEY ( returnid );

CREATE TABLE cos_457_final.state (
    stateid   NUMBER NOT NULL,
    statename VARCHAR2(20 BYTE) NOT NULL
);

CREATE UNIQUE INDEX cos_457_final.state_pk ON
    cos_457_final.state (
        stateid
    ASC );

ALTER TABLE cos_457_final.state ADD CONSTRAINT state_pk PRIMARY KEY ( stateid );

--ADDING ALL THE FOREIGN KEYS AFTER THE TABLES ARE CREATED-------------------------------------------------------

ALTER TABLE cos_457_final.book_author
    ADD CONSTRAINT book_author_fk1 FOREIGN KEY ( bookid )
        REFERENCES cos_457_final.books ( bookid );

ALTER TABLE cos_457_final.book_author
    ADD CONSTRAINT book_author_fk2 FOREIGN KEY ( authorid )
        REFERENCES cos_457_final.authors ( authorid );

ALTER TABLE cos_457_final.book_genre
    ADD CONSTRAINT book_genre_fk1 FOREIGN KEY ( bookid )
        REFERENCES cos_457_final.books ( bookid );

ALTER TABLE cos_457_final.book_genre
    ADD CONSTRAINT book_genre_fk2 FOREIGN KEY ( genreid )
        REFERENCES cos_457_final.genre ( genreid );

ALTER TABLE cos_457_final.borrowed_books
    ADD CONSTRAINT borrowed_books_fk1 FOREIGN KEY ( bookid )
        REFERENCES cos_457_final.books ( bookid );

ALTER TABLE cos_457_final.borrowed_books
    ADD CONSTRAINT borrowed_books_fk2 FOREIGN KEY ( userid )
        REFERENCES cos_457_final.libuser ( userid );

ALTER TABLE cos_457_final.borrowed_books
    ADD CONSTRAINT borrowed_books_fk3 FOREIGN KEY ( librarianid )
        REFERENCES cos_457_final.librarians ( librarianid );

ALTER TABLE cos_457_final.contact_email
    ADD CONSTRAINT contact_email_fk1 FOREIGN KEY ( contactid )
        REFERENCES cos_457_final.contact ( contactid );

ALTER TABLE cos_457_final.contact_email
    ADD CONSTRAINT contact_email_fk2 FOREIGN KEY ( emailid )
        REFERENCES cos_457_final.email ( emailid );

ALTER TABLE cos_457_final.contact
    ADD CONSTRAINT contact_fk1 FOREIGN KEY ( stateid )
        REFERENCES cos_457_final.state ( stateid );

ALTER TABLE cos_457_final.contact_phone
    ADD CONSTRAINT contact_phone_fk1 FOREIGN KEY ( contactid )
        REFERENCES cos_457_final.contact ( contactid );

ALTER TABLE cos_457_final.contact_phone
    ADD CONSTRAINT contact_phone_fk2 FOREIGN KEY ( phoneid )
        REFERENCES cos_457_final.phone ( phoneid );

ALTER TABLE cos_457_final.librarians_jobs
    ADD CONSTRAINT librarians_jobs_fk1 FOREIGN KEY ( jobid )
        REFERENCES cos_457_final.jobs ( jobid );

ALTER TABLE cos_457_final.librarians_jobs
    ADD CONSTRAINT librarians_jobs_fk2 FOREIGN KEY ( librarianid )
        REFERENCES cos_457_final.librarians ( librarianid );

ALTER TABLE cos_457_final.libuser
    ADD CONSTRAINT libuser_fk1 FOREIGN KEY ( contactid )
        REFERENCES cos_457_final.contact ( contactid );

ALTER TABLE cos_457_final.returned_books
    ADD CONSTRAINT returned_books_fk1 FOREIGN KEY ( librarianid )
        REFERENCES cos_457_final.librarians ( librarianid );

ALTER TABLE cos_457_final.returned_books
    ADD CONSTRAINT returned_books_fk2 FOREIGN KEY ( bookid )
        REFERENCES cos_457_final.books ( bookid );

--CREATE THE AUTOINCREMENT SEQUENCE------------------------------------------------------------------------------

CREATE SEQUENCE cos_457_final.authors_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.authors_trg BEFORE
    INSERT ON cos_457_final.authors
    FOR EACH ROW
    WHEN ( new.authorid IS NULL )
BEGIN
    :new.authorid := cos_457_final.authors_seq.nextval;
END;


CREATE SEQUENCE cos_457_final.books_seq1 START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.books_trg BEFORE
    INSERT ON cos_457_final.books
    FOR EACH ROW
    WHEN ( new.bookid IS NULL )
BEGIN
    :new.bookid := cos_457_final.books_seq1.nextval;
END;


CREATE SEQUENCE cos_457_final.contact_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.contact_trg BEFORE
    INSERT ON cos_457_final.contact
    FOR EACH ROW
    WHEN ( new.contactid IS NULL )
BEGIN
    :new.contactid := cos_457_final.contact_seq.nextval;
END;


CREATE SEQUENCE cos_457_final.email_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.email_trg BEFORE
    INSERT ON cos_457_final.email
    FOR EACH ROW
    WHEN ( new.emailid IS NULL )
BEGIN
    :new.emailid := cos_457_final.email_seq.nextval;
END;


CREATE SEQUENCE cos_457_final.genre_seq2 START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.genre_trg1 BEFORE
    INSERT ON cos_457_final.genre
    FOR EACH ROW
    WHEN ( new.genreid IS NULL )
BEGIN
    :new.genreid := cos_457_final.genre_seq2.nextval;
END;


CREATE SEQUENCE cos_457_final.jobs_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.jobs_trg BEFORE
    INSERT ON cos_457_final.jobs
    FOR EACH ROW
    WHEN ( new.jobid IS NULL )
BEGIN
    :new.jobid := cos_457_final.jobs_seq.nextval;
END;


CREATE SEQUENCE cos_457_final.librarians_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.librarians_trg BEFORE
    INSERT ON cos_457_final.librarians
    FOR EACH ROW
    WHEN ( new.librarianid IS NULL )
BEGIN
    :new.librarianid := cos_457_final.librarians_seq.nextval;
END;


CREATE SEQUENCE cos_457_final.libuser_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.libuser_trg BEFORE
    INSERT ON cos_457_final.libuser
    FOR EACH ROW
    WHEN ( new.userid IS NULL )
BEGIN
    :new.userid := cos_457_final.libuser_seq.nextval;
END;


CREATE SEQUENCE cos_457_final.phone_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.phone_trg BEFORE
    INSERT ON cos_457_final.phone
    FOR EACH ROW
    WHEN ( new.phoneid IS NULL )
BEGIN
    :new.phoneid := cos_457_final.phone_seq.nextval;
END;


CREATE SEQUENCE cos_457_final.returned_books_seq2 START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_457_final.returned_books_trg1 BEFORE
    INSERT ON cos_457_final.returned_books
    FOR EACH ROW
    WHEN ( new.returnid IS NULL )
BEGIN
    :new.returnid := cos_457_final.returned_books_seq2.nextval;
END;

--CUSTOM TRIGGER--------------------------------------------------------------------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER Create_RTS_Order 
AFTER UPDATE OF RETURNDATE ON BORROWED_BOOKS
REFERENCING OLD AS OLD NEW AS NEW
for each row
BEGIN
    if :old.returndate = null then
        INSERT INTO RETURNED_BOOKS
        (LIBRARIANID, BOOKID, returned_to_shelf)
        VALUES
        (dbms_random.value(2,4), :OLD.bookid, 0);
    end if;
END;

CREATE OR REPLACE NONEDITIONABLE TRIGGER DEC_COPIES 
AFTER INSERT ON BORROWED_BOOKS 
REFERENCING NEW AS NEW
FOR EACH ROW
BEGIN
    UPDATE BOOKS
    SET
    books.copies_available = BOOKS.COPIES_AVAILABLE - 1
    WHERE
    bookid = :new.bookid;
END;

CREATE OR REPLACE NONEDITIONABLE TRIGGER inc_copy 
AFTER UPDATE OF RETURNED_TO_SHELF ON RETURNED_BOOKS 
REFERENCING OLD AS OLD NEW AS NEW 
for each row
BEGIN
    if :new.returned_to_shelf = 1 then
        UPDATE BOOKS
        SET
        books.copies_available = BOOKS.COPIES_AVAILABLE + 1
        WHERE
        bookid = :NEW.bookid;
    end if;
END;

--INSERT EXAMPLES---------------------------------------------------------------------------------------------------
--THERE IS ONE EXAMPLE FOR EACH TABLE-------------------------------------------------------------------------------


INSERT INTO PHONE
(PHONENUMBER, CONTACTID)
VALUES
('(123) 456-7890', 1);


INSERT INTO EMAIL
(EMAILADDRESS, CONTACTID)
VALUES
('BLAHLACH@GMAIL.COM, 1);


INSERT INTO STATE
(STATE)
VALUES
('CA');


INSERT INTO CONTACT
(CONTACTID, ADDRESS, CITY, STATEID, ZIP)
VALUES
(1, '123 Main St', 'Los Angeles', 1, '90210');


INSERT INTO LIBUSER
(NAME, FAMILY_NAME, BIRTHDATE, CONTACTID)
VALUES
('John', 'Smith', '01/01/2000', 1);


INSERT INTO AUTHORS
(FIRSTNAME, LASTNAME)
VALUES
('F. Scott', 'Fitzgerald');


INSERT INTO GENRE
(GENRE)
VALUES
('Historical fiction');


INSERT INTO BOOKS
(TITLE, PAGECOUNT, COPIES, COPIES_AVAILABLE, ISBN, YEAR_OF_PUP)
VALUES
('The Great Gatsby', '200', '5', '5', '978-0-553-37709-3', '1925');


INSERT INTO BORROWED_BOOKS
(USERID, LIBRARIANID, BORROWED_DATE)
VALUES
(1, 2, '01/01/2000');


INSERT INTO LIBRARIANS
(NAME, FAMILY_NAME, EMAIL)
VALUES
('John', 'Smith', 'BADSFBADF@GMAIL.COM');

INSERT INTO JOBS
(JOBID, JOB)
VALUES
(1, 'Head Librarian');

--THE INSERT FOR BOOK_GENRE, CONTACT_EMAIL, CONTACT_PHONE, AND LIBRARIANS_JOBS ARE ALL THE SAME BUT WITH DIFFERENT TABLE NAMES AND COLUMN NAMES CORESPONDING TO THAT TABLE SO I AM ONLY INCLUDING ONE EXAMPLE FOR ALL OF THEM

INSERT INTO BOOK_GENRE
(BOOKID, GENREID)
VALUES
(1, 1);

--UPDATES---------------------------------------------------------------------------------------------------------

UPDATE RETURNED_BOOKS
SET
returned_to_shelf = 1
WHERE
returnid = 0;
AND RETURNED_BOOKS.BOOKID = 1;

--SOME EXAMPLE OF SOME SELECTS-----------------------------------------------------------------------------------

--SEARCH FOR GENRE-----------------------------------------------------------------------------------------------

SELECT
    BOOK_GENRE.BOOKID,
    BOOKS.title,
    GENRE.GENRE
FROM
    BOOK_GENRE
    INNER JOIN GENRE ON book_genre.GENREID = GENRE.GENREID
    INNER JOIN BOOKS ON book_genre.BOOKID = BOOKS.BOOKID
WHERE
    GENRE.GENREID = 5
ORDER 
    by BOOKID

--GET LIST OF USER AND THEIR ADDRESSES---------------------------------------------------------------------------

SELECT 
    USERID,
    NAME,
    FAMILY_NAME,
    CONTACT.address,
    CONTACT.city,
    STATE.STATENAME AS STATE,
FROM 
    LIBUSER
    INNER JOIN CONTACT ON CONTACT.COPNTACTID = LIBUSER.CONTACTID
    INNER JOIN STATE ON STATE.STATEID = CONTACT.STATEID

--GET LIST OF BOOKS AND THEIR GENRES----------------------------------------------------------------------------

SELECT
    BOOKS.TITLE,
    GENRE.GENRE
FROM
    BOOKS
    INNER JOIN BOOK_GENRE ON BOOKS.BOOKID = BOOK_GENRE.BOOKID
    INNER JOIN GENRE ON BOOK_GENRE.GENREID = GENRE.GENREID
ORDER BY
    BOOKS.TITLE;

--HAVING TROUBLE WITH THE JOIN

--GET LIST OF LIBRARIANS AND THEIR JOBS--------------------------------------------------------------------------

SELECT
    LIBRARIANS.NAME,
    LIBRARIANS.FAMILY_NAME,
    JOBS.JOB
FROM
    LIBRARIANS
    INNER JOIN LIBRARIANS_JOBS ON librarians_jobs.librarianid = librarians.librarianid
    INNER JOIN JOBS ON JOBS.JOBID = librarians_JOBS.JOBID
ORDER BY
    LIBRARIANS.NAME;

--A LIST OF WHAT BOOKS ARE CURRENTLY BORROWED-------------------------------------------------------------------

SELECT
    userid,
    bookid
FROM 
    borrowed_books
WHERE 
    returndate is NULL;

